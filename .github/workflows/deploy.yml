name: deploy

on:
  push:
    branches: ["dev"]

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3  # clone repository

      # Caching Gradle
      - name: Cache Gradle
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Gradle Authorization
        run: chmod +x gradlew

      - name: Gradle Build Run
        run: ./gradlew build -x test

      # $GITHUB_SHA는 GitHub가 자동으로 제공하는 커밋 해시 환경변수입니다.
      # 이를 이용해 ZIP 파일 이름을 고유하게 지정합니다.
      - name: Create Zip files
        run: zip -r "./${GITHUB_SHA}.zip" .

      - name: Connecting to AWS
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Upload File to S3
        run: |
          aws s3 cp \
            --region ap-northeast-2 \
            "./${GITHUB_SHA}.zip" s3://ceos-promesa

      - name: Request to CodeDeploy
        run: |
          aws deploy create-deployment \
            --application-name test-application \
            --deployment-config-name CodeDeployDefault.AllAtOnce \
            --deployment-group-name Promesa-BlueGreen-DeploymentGroup \
            --s3-location bucket=ceos-promesa,bundleType=zip,key=${GITHUB_SHA}.zip
