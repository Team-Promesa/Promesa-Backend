name: deploy

on:
  workflow_dispatch:     # 수동 실행 버튼 활성화
  push:
    branches: ["dev"]

permissions:
  contents: read

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    env:
      AWS_REGION: ap-northeast-2
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      ECR_REPOSITORY: promesa-repo
    
    steps:
      # 1) 코드 체크아웃
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      # 2) AWS 자격증명 설정
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      # 3) JDK 17 설치 & Gradle 빌드
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Gradle Build Run (skip tests)
        run: ./gradlew build -x test

      # 4) Docker 이미지 빌드
      - name: Build Docker image
        run: |
          IMAGE_TAG=${{ github.sha }}
          # Dockerfile이 있는 디렉터리(프로젝트 최상위)에 따라 경로를 지정
          docker build -t promesa:${IMAGE_TAG} .
          docker tag promesa:${IMAGE_TAG} promesa:latest
          
      # 5) ECR 로그인 (Docker CLI용 토큰)
      - name: ECR Login
        uses: aws-actions/amazon-ecr-login@v1
        with:
          region: ${{ env.AWS_REGION }}

      # 6) Docker 이미지 Tag & Push to ECR
      - name: Tag and Push to ECR
        run: |
          IMAGE_TAG=${{ github.sha }}
          ECR_REGISTRY=${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com
          # 1) SHA 태그로 tag & push
          docker tag promesa:${IMAGE_TAG} ${ECR_REGISTRY}/${{ env.ECR_REPOSITORY }}:${IMAGE_TAG}
          docker push ${ECR_REGISTRY}/${{ env.ECR_REPOSITORY }}:${IMAGE_TAG}

          # 2) latest 태그로도 tag & push
          docker tag promesa:latest ${ECR_REGISTRY}/${{ env.ECR_REPOSITORY }}:latest
          docker push ${ECR_REGISTRY}/${{ env.ECR_REPOSITORY }}:latest
          
      # 7) 앱팩(AppSpec) 및 스크립트(예: scripts/)를 ZIP으로 묶기
      - name: Zip for CodeDeploy
        run: |
          zip -r latest.zip appspec.yml scripts/

      # 8) S3로 ZIP 업로드
      - name: Upload to S3
        run: |
          aws s3 cp \
            latest.zip s3://ceos-promesa/latest.zip

      # 9) CodeDeploy 배포 요청
      - name: Request to CodeDeploy
        run: |
          aws deploy create-deployment \
            --application-name test-application \
            --deployment-config-name CodeDeployDefault.AllAtOnce \
            --deployment-group-name Promesa-BlueGreen-DeploymentGroup \
            --s3-location bucket=ceos-promesa,bundleType=zip,key=latest.zip
